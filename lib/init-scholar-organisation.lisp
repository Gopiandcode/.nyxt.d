(in-package :nyxt-user)

(defvar downloaded-scholar-article nil
  "Google Scholar article currently being downloaded.")

(defmacro with-user-provided-scholar-pdf (syms &body body)
  "Prompt user for a google scholar pdf entry and evaluate BDOY with ID-SYM bound to the url."
  (cond
    ((or (symbolp syms) (and (listp syms) (equal (length syms) 1)))
     (let ((id-sym (if (listp syms) (car syms) syms))
           (lam-var-sym (gensym)))
       `(nyxt/web-mode:query-hints
         "Paper to download and read"
         (lambda (,lam-var-sym) (when (and ,lam-var-sym (car ,lam-var-sym))
                                  (let ((,id-sym (plump:get-attribute (car ,lam-var-sym) "href")))
                                    (when ,id-sym
                                      ,@body))))
         :selector ".gs_or_ggsm > a")))
    ((and (listp syms) (equal (length syms) 2))
     (let ((url-sym (elt syms 0))
           (id-sym (elt syms 1))
           (lam-var-sym (gensym)))
       `(nyxt/web-mode:query-hints
         "Paper to download and read"
         (lambda (,lam-var-sym) (when (and ,lam-var-sym (car ,lam-var-sym))
                                  (let ((,url-sym
                                          (plump:get-attribute (car ,lam-var-sym) "href"))
                                        (,id-sym
                                          (plump:get-attribute (car ,lam-var-sym) "data-clk-atid")))
                                    (when (and ,url-sym ,id-sym)
                                      ,@body))))
         :selector ".gs_or_ggsm > a"))

     )
    (t (error "invalid binding form ~a" syms))))

(defmacro with-downloads-redirected-to (path &body body)
  "Evaluate BODY, redirecting downloads to PATH."
  (let ((old-path-sym (gensym))
        (result-sym (gensym)))
    `(let ((,old-path-sym  (dirname (download-path (current-buffer)))))
       (setf (dirname (download-path (current-buffer))) ,path)
       (let ((,result-sym (progn ,@body)))
         (setf (dirname (download-path (current-buffer))) ,old-path-sym)
         ,result-sym))))


(defun scholar-extract-bibtex-key (entry)
  "Given a bibtex ENTRY, extracts the bibtex key."
  (ppcre:register-groups-bind (key)
      ("@.*\{[ \n\t]*(.*)[ \n]*," entry)
    key))

(defun download-pdf-to-org-papers (url id)
  "Download a URL to a pdf to the org/papers directory."
  (alexandria:when-let*
      ((bibtex-entry (fetch-bibtex-from-scholar-id id))
       (bibtex-key (scholar-extract-bibtex-key bibtex-entry)))
    (let ((filename (concatenate 'string "/home/kirang/org/papers/" bibtex-key ".pdf")))
      (cond
        ((probe-file filename)
         ;; file exists, just open it
         (eval-in-emacs `(nyxt-open-path ,(concatenate 'string "file://" filename))))
        ;; file has not been downloaded before
        (t
         (unless downloaded-scholar-article
           (with-downloads-redirected-to "/home/kirang/org/papers/"
             (setq downloaded-scholar-article (cons url bibtex-key))
             (download (current-buffer) url))))))))

(defun open-scholar-download-in-emacs (download)
  "When completed DOWNLOAD was generated by download-scholar-article,
open downloaded file in emacs."
  (when (and
         downloaded-scholar-article
         (equal (url download) (car downloaded-scholar-article)))
    (ignore-errors
     (eval-in-emacs
      `(nyxt-open-path-and-rename
        ,(nyxt::destination-path download) ,(cdr downloaded-scholar-article))))
    (setq downloaded-scholar-article nil)))




(define-command-global download-scholar-article ()
  "When navigating a google-scholar page, select a paper, download it,
and open it in emacs."
  (with-user-provided-scholar-pdf (url id)
    (download-pdf-to-org-papers url id)))



(define-configuration browser
  ((nyxt:after-download-hook
    (hooks:add-hook %slot-default%  #'open-scholar-download-in-emacs))))
